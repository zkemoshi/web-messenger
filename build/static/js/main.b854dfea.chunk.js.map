{"version":3,"sources":["actions/constants.js","components/Header/index.js","actions/auth.actions.js","components/Layout/index.js","containers/HomePage/index.js","actions/user.actions.js","components/UI/Card/index.js","containers/LoginPage/index.js","containers/RegisterPage/index.js","components/PrivateRoute.js","App.js","serviceWorker.js","reducers/auth.reducer.js","reducers/user.reducer.js","reducers/index.js","store/index.js","index.js"],"names":["authConstanst","userConstants","Header","props","auth","useSelector","state","dispatch","useDispatch","className","style","display","authenticated","to","margin","color","fontWeight","firstName","lastName","onClick","uid","a","type","firestore","collection","doc","update","isOnline","then","signOut","localStorage","clear","catch","error","console","log","payload","Layout","children","User","user","src","alt","flex","justifyContent","HomePage","unsubscribe","useState","chatStarted","setChatStarted","chatUser","setChatUser","message","setMessage","userUid","setUserUid","useEffect","db","onSnapshot","querySnapshot","users","forEach","data","push","f","initChat","where","uid_1","uid_2","orderBy","conversations","user_uid_1","user_uid_2","getRealtimeConversations","length","map","key","con","textAlign","value","onChange","e","target","placeholder","msgObj","add","isView","createdAt","Date","updateMessage","Card","LoginPage","email","setEmail","password","setPassword","onSubmit","preventDefault","signInWithEmailAndPassword","name","displayName","split","loggedInUser","setItem","JSON","stringify","alert","RegisterPage","setFirstName","setLastName","createUserWithEmailAndPassword","currentUser","updateProfile","set","signup","PrivateRoute","Component","component","rest","getItem","parse","App","path","exact","Boolean","window","location","hostname","match","initState","authenticating","intiState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b854dfea.chunk.js","sourcesContent":["export const authConstanst = {\n    USER_LOGIN: 'USER_LOGIN',\n    USER_LOGOUT: 'USER_LOGOUT'\n}\n\nexport const userConstants = {\n    GET_REALTIME_USERS: 'GET_REALTIME_USERS',\n    GET_REALTIME_MESSAGES: 'GET_REALTIME_MESSAGES'\n}","import React from 'react';\nimport { NavLink, Link } from 'react-router-dom';\nimport './style.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { logout } from '../../actions';\n\n/**\n* @author\n* @function Header\n**/\n\nconst Header = (props) => {\n\n  const auth = useSelector(state => state.auth);\n  const dispatch = useDispatch();\n\n  // const logout = () => {\n  //   dispatch(logout())\n  // }\n\n  return(\n    <header className=\"header\">\n        <div style={{display: 'flex'}}>\n          <div className=\"logo\">Web Messenger</div>\n            \n            {\n              !auth.authenticated ? \n              <ul className=\"leftMenu\">\n                <li><NavLink to={'/login'}>Login</NavLink></li>\n                <li><NavLink to={'/signup'}>Sign up</NavLink></li>\n              </ul> : null\n            }\n              \n\n            \n        </div>\n          <div style={{margin: '20px 0', color: '#fff', fontWeight: 'bold'}}>\n            {auth.authenticated ? `Hi ${auth.firstName} ${auth.lastName}` : ''}\n          </div>\n        <ul className=\"menu\">\n\n            {\n              auth.authenticated ?\n              <li>\n                <Link to={'#'} onClick={() => {\n                  dispatch(logout(auth.uid))\n                }}>Logout</Link>\n            </li> : null\n            }\n          \n            \n             \n        </ul>\n    </header>\n   )\n\n }\n\nexport default Header","import { auth, firestore } from 'firebase';\nimport { authConstanst } from './constants';\nimport { getRealtimeUsers } from './user.actions';\n\nexport const signup = (user) => {\n\n    return async (dispatch) => {\n\n        const db = firestore();\n\n        dispatch({type: `${authConstanst.USER_LOGIN}_REQUEST`});\n\n        auth()\n        .createUserWithEmailAndPassword(user.email, user.password)\n        .then(data => {\n            console.log(data);\n            const currentUser = auth().currentUser;\n            const name = `${user.firstName} ${user.lastName}`;\n            currentUser.updateProfile({\n                displayName: name\n            })\n            .then(() => {\n                //if you are here means it is updated successfully\n                db.collection('users')\n                .doc(data.user.uid)\n                .set({\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    uid: data.user.uid,\n                    createdAt: new Date(),\n                    isOnline: true\n                })\n                .then(() => {\n                    //succeful\n                    const loggedInUser = {\n                        firstName: user.firstName,\n                        lastName: user.lastName,\n                        uid: data.user.uid,\n                        email: user.email\n                    }\n                    localStorage.setItem('user', JSON.stringify(loggedInUser));\n                    console.log('User logged in successfully...!');\n                    dispatch({\n                        type: `${authConstanst.USER_LOGIN}_SUCCESS`,\n                        payload: { user: loggedInUser }\n                    })\n                })\n                .catch(error => {\n                    console.log(error);\n                    dispatch({ \n                        type: `${authConstanst.USER_LOGIN}_FAILURE`,\n                        payload: { error }\n                      });\n                });\n            });\n        })\n        .catch(error => {\n            console.log(error);\n        })\n\n\n    }\n\n\n}\n\nexport const signin = (user) => {\n    return async dispatch => {\n\n        dispatch({ type: `${authConstanst.USER_LOGIN}_REQUEST` });\n        auth()\n        .signInWithEmailAndPassword(user.email, user.password)\n        .then((data) => {\n            console.log(data);\n\n\n            const db = firestore();\n            db.collection('users')\n            .doc(data.user.uid)\n            .update({\n                isOnline: true\n            })\n            .then(() => {\n                const name = data.user.displayName.split(\" \");\n                const firstName = name[0];\n                const lastName = name[1];\n\n                const loggedInUser = {\n                    firstName,\n                    lastName,\n                    uid: data.user.uid,\n                    email: data.user.email\n                }\n\n                localStorage.setItem('user', JSON.stringify(loggedInUser));\n\n                dispatch({\n                    type: `${authConstanst.USER_LOGIN}_SUCCESS`,\n                    payload: { user: loggedInUser }\n                });\n            })\n            .catch(error => {\n                console.log(error)\n            })\n\n            \n\n\n\n        })\n        .catch(error => {\n            console.log(error);\n            dispatch({\n                type: `${authConstanst.USER_LOGIN}_FAILURE`,\n                payload: { error }\n            })\n        })\n        \n\n\n    }\n}\n\nexport const isLoggedInUser = () => {\n    return async dispatch => {\n\n        const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\n\n        if(user){\n            dispatch({\n                type: `${authConstanst.USER_LOGIN}_SUCCESS`,\n                payload: { user }\n            });\n        }else{\n            dispatch({\n                type: `${authConstanst.USER_LOGIN}_FAILURE`,\n                payload: { error: 'Login again please' }\n            });\n        }\n\n\n    }\n}\n\nexport const logout = (uid) => {\n    return async dispatch => {\n        dispatch({ type: `${authConstanst.USER_LOGOUT}_REQUEST` });\n        //Now lets logout user\n\n        const db = firestore();\n        db.collection('users')\n        .doc(uid)\n        .update({\n            isOnline: false\n        })\n        .then(() => {\n\n            auth()\n            .signOut()\n            .then(() => {\n                //successfully\n                localStorage.clear();\n                dispatch({type: `${authConstanst.USER_LOGOUT}_SUCCESS`});\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch({ type: `${authConstanst.USER_LOGOUT}_FAILURE`, payload: { error } })\n            })\n\n        })\n        .catch(error => {\n            console.log(error);\n        })\n\n        \n\n\n    }\n}\n\n","import React from 'react';\nimport Header from '../Header';\n\n/**\n* @author\n* @function Layout\n**/\n\nconst Layout = (props) => {\n  return(\n    <div>\n        <Header />\n        {props.children}\n    </div>\n   )\n\n }\n\nexport default Layout","import React, { useEffect, useState } from 'react';\nimport './style.css';\nimport Layout from '../../components/Layout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getRealtimeUsers, updateMessage, getRealtimeConversations } from '../../actions';\n\n\nconst User = (props) => {\n\n\n  const {user, onClick} = props;\n\n  return (\n    <div onClick={() => onClick(user)} className=\"displayName\">\n                  <div className=\"displayPic\">\n                      <img src=\"https://i.pinimg.com/originals/be/ac/96/beac96b8e13d2198fd4bb1d5ef56cdcf.jpg\" alt=\"\" />\n                  </div>\n                  <div style={{ display: 'flex', flex: 1, justifyContent: 'space-between', margin: '0 10px'}}>\n                      <span style={{fontWeight: 500}}>{user.firstName} {user.lastName}</span>\n                      <span className={user.isOnline ? `onlineStatus` : `onlineStatus off`}></span>\n                  </div>\n              </div>\n  );\n}\n\nconst HomePage = (props) => {\n\n  const dispatch = useDispatch();\n  const auth = useSelector(state => state.auth);\n  const user = useSelector(state => state.user);\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatUser, setChatUser] = useState('');\n  const [message, setMessage] = useState('');\n  const [userUid, setUserUid] = useState(null);\n  let unsubscribe;\n\n\n  useEffect(() => {\n\n    unsubscribe = dispatch(getRealtimeUsers(auth.uid))\n    .then(unsubscribe => {\n      return unsubscribe;\n    })\n    .catch(error => {\n      console.log(error);\n    })\n\n    \n\n\n  }, []);\n\n  //console.log(user);\n\n  //componentWillUnmount\n  useEffect(() => {\n    return () => {\n      //cleanup\n      unsubscribe.then(f => f()).catch(error => console.log(error));\n\n    }\n  }, []);\n\n\n  const initChat = (user) => {\n\n    setChatStarted(true)\n    setChatUser(`${user.firstName} ${user.lastName}`)\n    setUserUid(user.uid);\n\n    console.log(user);\n\n    dispatch(getRealtimeConversations({ uid_1: auth.uid, uid_2: user.uid }));\n\n  }\n\n  const submitMessage = (e) => {\n\n    const msgObj = {\n      user_uid_1: auth.uid,\n      user_uid_2: userUid,\n      message\n    }\n\n\n    if(message !== \"\"){\n      dispatch(updateMessage(msgObj))\n      .then(() => {\n        setMessage('')\n      });\n    }\n\n    //console.log(msgObj);\n\n  }\n\n\n  return (\n    <Layout>\n      <section className=\"container\">\n\n        <div className=\"listOfUsers\">\n\n\n          {\n            user.users.length > 0 ?\n            user.users.map(user => {\n              return (\n                <User \n                  onClick={initChat}\n                  key={user.uid} \n                  user={user} \n                  />\n              );\n            }) : null\n          }\n\n            \n                    \n        </div>\n\n        <div className=\"chatArea\">\n            \n            <div className=\"chatHeader\"> \n            {\n              chatStarted ? chatUser : ''\n            }\n            </div>\n            <div className=\"messageSections\">\n                {\n                  chatStarted ? \n                  user.conversations.map(con =>\n                    <div style={{ textAlign: con.user_uid_1 == auth.uid ? 'right' : 'left' }}>\n                    <p className=\"messageStyle\" >{con.message}</p>\n                  </div> )\n                  : null\n                }\n                \n\n            </div>\n            {\n              chatStarted ? \n              <div className=\"chatControls\">\n                <textarea \n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  placeholder=\"Write Message\"\n                />\n                <button onClick={submitMessage}>Send</button>\n            </div> : null\n            }\n            \n        </div>\n    </section>\n  </Layout>\n  );\n}\n\nexport default HomePage;","import { userConstants } from \"./constants\";\nimport { firestore } from 'firebase';\n\nexport const getRealtimeUsers = (uid) => {\n\n    //console.log('uid', uid)\n\n    return async (dispatch) => {\n\n        dispatch({ type: `${userConstants.GET_REALTIME_USERS}_REQUEST` });\n\n        const db = firestore();\n        const unsubscribe = db.collection(\"users\")\n        //.where(\"uid\", \"!=\", uid)\n        .onSnapshot((querySnapshot) => {\n            const users = [];\n            querySnapshot.forEach(function(doc) {\n                if(doc.data().uid != uid){\n                    users.push(doc.data());\n                }\n            });\n            //console.log(users);\n\n            dispatch({ \n                type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\n                payload: { users }\n            });\n\n        });\n\n        return unsubscribe;\n\n    }\n\n}\n\nexport const updateMessage = (msgObj) => {\n    return async dispatch => {\n\n        const db = firestore();\n        db.collection('conversations')\n        .add({\n            ...msgObj,\n            isView: false,\n            createdAt: new Date()\n        })\n        .then((data) => {\n            console.log(data)\n            //success\n            // dispatch({\n            //     type: userConstants.GET_REALTIME_MESSAGES,\n            // })\n\n\n        })\n        .catch(error => {\n            console.log(error)\n        });\n\n    }\n}\n\nexport const getRealtimeConversations = (user) => {\n    return async dispatch => {\n\n        const db = firestore();\n        db.collection('conversations')\n        .where('user_uid_1', 'in', [user.uid_1, user.uid_2])\n        .orderBy('createdAt', 'asc')\n        .onSnapshot((querySnapshot) => {\n\n            const conversations = [];\n\n            querySnapshot.forEach(doc => {\n\n                if(\n                    (doc.data().user_uid_1 == user.uid_1 && doc.data().user_uid_2 == user.uid_2)\n                    || \n                    (doc.data().user_uid_1 == user.uid_2 && doc.data().user_uid_2 == user.uid_1)\n                ){\n                    conversations.push(doc.data())\n                }\n\n                \n\n                // if(conversations.length > 0){\n                    \n                // }else{\n                //     dispatch({\n                //         type: `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`,\n                //         payload: { conversations }\n                //     })\n                // }\n\n\n\n                \n            });\n\n            dispatch({\n                type: userConstants.GET_REALTIME_MESSAGES,\n                payload: { conversations }\n            })\n\n            console.log(conversations);\n        })\n        //user_uid_1 == 'myid' and user_uid_2 = 'yourId' OR user_uid_1 = 'yourId' and user_uid_2 = 'myId'\n\n\n    }\n}","import React from 'react';\nimport './style.css';\n\n/**\n* @author\n* @function Card\n**/\n\nconst Card = (props) => {\n  return(\n    <div className=\"card\">\n        {props.children}\n    </div>\n   )\n\n }\n\nexport default Card","import React, { useState, useEffect } from 'react'\nimport Layout from '../../components/Layout';\nimport Card from '../../components/UI/Card';\nimport { signin, isLoggedInUser } from '../../actions';\nimport './style.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\n/**\n* @author\n* @function LoginPage\n**/\n\nconst LoginPage = (props) => {\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  const auth = useSelector(state => state.auth);\n\n  // useEffect(() => {\n  //   if(!auth.authenticated){\n  //     dispatch(isLoggedInUser())\n  //   }\n  // }, []);\n\n\n\n\n  const userLogin = (e) => {\n    e.preventDefault();\n\n    if(email == \"\"){\n      alert(\"Email is required\");\n      return;\n    }\n    if(password == \"\"){\n      alert(\"Password is required\");\n      return;\n    }\n\n    dispatch(signin({ email, password }));\n    \n\n\n\n\n  }\n\n\n  if(auth.authenticated){\n    return <Redirect to={`/`} />\n  }\n\n\n\n  return(\n    <Layout>\n      <div className=\"loginContainer\">\n        <Card>\n          <form onSubmit={userLogin}>\n            \n            <input \n              name=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Email\"\n            />\n\n            <input \n              name=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Password\"\n            />\n\n\n            <div>\n              <button>Login</button>\n            </div>\n\n          </form>\n        </Card>\n      </div>\n    </Layout>\n   )\n\n }\n\nexport default LoginPage","import React, { useState } from 'react';\nimport Layout from '../../components/Layout';\nimport Card from '../../components/UI/Card';\nimport { signup } from '../../actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\n/**\n* @author\n* @function RegisterPage\n**/\n\nconst RegisterPage = (props) => {\n\n\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  const auth = useSelector(state => state.auth);\n\n\n  const registerUser = (e) => {\n    \n    e.preventDefault();\n\n    const user = {\n      firstName, lastName, email, password\n    }\n    \n    dispatch(signup(user))\n  }\n\n\n  if(auth.authenticated){\n    return <Redirect to={`/`} />\n  }\n\n  return(\n    <Layout>\n      <div className=\"registerContainer\">\n        <Card>\n          <form onSubmit={registerUser}>\n\n            <h3>Sign up</h3>\n\n          <input \n              name=\"firstName\"\n              type=\"text\"\n              value={firstName}\n              onChange={(e) => setFirstName(e.target.value)}\n              placeholder=\"First Name\"\n            />\n\n            <input \n              name=\"lastName\"\n              type=\"text\"\n              value={lastName}\n              onChange={(e) => setLastName(e.target.value)}\n              placeholder=\"Last Name\"\n            />\n\n            <input \n              name=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Email\"\n            />\n\n            <input \n              name=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Password\"\n            />\n\n            <div>\n              <button>Sign up</button>\n            </div>\n\n\n\n          </form>\n        </Card>\n      </div>\n    </Layout>\n   )\n\n }\n\nexport default RegisterPage","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n/**\n* @author\n* @function PrivateRoute\n**/\n\nconst PrivateRoute = ({component: Component, ...rest}) => {\n  return(\n    <Route {...rest} component={(props) => {\n        const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\n\n        if(user){\n            return <Component {...props} />\n        }else{\n            return <Redirect to={`/login`} />\n        }\n\n    }} />\n   )\n\n }\n\nexport default PrivateRoute","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport HomePage from './containers/HomePage';\nimport LoginPage from './containers/LoginPage';\nimport RegisterPage from './containers/RegisterPage';\nimport PrivateRoute from './components/PrivateRoute';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isLoggedInUser } from './actions';\n\nfunction App() {\n\n  const auth = useSelector(state => state.auth);\n  const dispatch = useDispatch()\n\n\n  useEffect(() => {\n    if(!auth.authenticated){\n      dispatch(isLoggedInUser())\n    }\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <Router>\n        {/* only logged in user can access this home route */}\n        <PrivateRoute path=\"/\" exact component={HomePage} />\n\n\n        <Route path=\"/login\" component={LoginPage} />\n        <Route path=\"/signup\" component={RegisterPage} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { authConstanst } from \"../actions/constants\"\n\nconst initState = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    authenticating: false,\n    authenticated: false,\n    error: null\n}\n\nexport default (state = initState, action) => {\n\n    console.log(action);\n\n    switch(action.type){\n\n        case `${authConstanst.USER_LOGIN}_REQUEST`:\n            state = {\n                ...state,\n                authenticating: true\n            }\n            break;\n        case `${authConstanst.USER_LOGIN}_SUCCESS`:\n            state = {\n                ...state,\n                ...action.payload.user,\n                authenticated: true,\n                authenticating: false\n            }\n            break;\n        case `${authConstanst.USER_LOGIN}_FAILURE`:\n            state = {\n                ...state,\n                authenticated: false,\n                authenticating: false,\n                error: action.payload.error\n            }\n            break;\n        case `${authConstanst.USER_LOGOUT}_REQUEST`:\n            break;\n        case `${authConstanst.USER_LOGOUT}_SUCCESS`:\n            state = {\n                ...initState\n            }\n            break;\n        case `${authConstanst.USER_LOGOUT}_FAILURE`:\n            state = {\n                ...state,\n                error: action.payload.error\n            }\n            break;\n\n    }\n\n\n    return state;\n}","import { userConstants } from \"../actions/constants\"\n\nconst intiState = {\n    users: [],\n    conversations: []\n}\n\nexport default (state = intiState, action) => {\n\n    switch(action.type){\n        case `${userConstants.GET_REALTIME_USERS}_REQUEST`:\n            break;\n        case `${userConstants.GET_REALTIME_USERS}_SUCCESS`:\n            state = {\n                ...state,\n                users: action.payload.users\n            }\n            break;\n        case userConstants.GET_REALTIME_MESSAGES:\n            state = {\n                ...state,\n                conversations: action.payload.conversations\n            }\n            break;\n        case `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`:\n            state = {\n                ...state,\n                conversations: []\n            }\n            break;\n        \n    }\n\n\n    return state;\n\n}","import { combineReducers } from \"redux\";\nimport authReducer from './auth.reducer';\nimport userReducer from './user.reducer';\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    user: userReducer,\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from '../reducers';\nimport thunk from 'redux-thunk';\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBF8co3-j6lq7qGI9b8s0U1YYEIwqXb4_0\",\n  authDomain: \"web-messenger-4eb99.firebaseapp.com\",\n  databaseURL: \"https://web-messenger-4eb99.firebaseio.com\",\n  projectId: \"web-messenger-4eb99\",\n  storageBucket: \"web-messenger-4eb99.appspot.com\",\n  messagingSenderId: \"252569616509\",\n  appId: \"1:252569616509:web:2bbb4c394e9d608f147114\",\n  measurementId: \"G-VXYE76S2G7\"\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\nwindow.store = store;\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}